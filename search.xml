<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>把本地hexo部署到github</title>
      <link href="/20181123/Local-hexo-Deploy-github.html"/>
      <url>/20181123/Local-hexo-Deploy-github.html</url>
      
        <content type="html"><![CDATA[<h1 id="把本地hexo部署到github"><a href="#把本地hexo部署到github" class="headerlink" title="把本地hexo部署到github"></a>把本地hexo部署到github</h1><h2 id="下载安装Git"><a href="#下载安装Git" class="headerlink" title="下载安装Git"></a>下载安装Git</h2><p>下载地址：<a href="https://git-for-windows.github.io" target="_blank" rel="noopener">https://git-for-windows.github.io</a></p><p>安装过程就不详细说了，下一步/下一步即可。</p><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>过程就不详细说了，按照提示操作即可。</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>过程就不详细说了，按照提示操作即可。</p><p>注：Github Pages的Repository名字是特定的，比如我Github账号是lixypro，那么我Github Pages Repository名字就是lixypro.github.io</p><h2 id="配置-config-yml（站点配置文件）"><a href="#配置-config-yml（站点配置文件）" class="headerlink" title="配置_config.yml（站点配置文件）"></a>配置_config.yml（站点配置文件）</h2><p>按照下面配置复制即可，不过要删掉括号以及里面的内容</p><pre><code>deploy:  type: git（固定格式）  repository: git@github.com:dgxueba/dgxueba.github.io.git（仓库地址）  branch: master（固定格式）</code></pre><h2 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h2><p>安装hexo-deployer-git自动部署发布工具</p><p>npm安装命令：</p><pre><code>npm install hexo-deployer-git  --save</code></pre><p>Cnpm安装命令：</p><pre><code>cnpm install hexo-deployer-git  --save</code></pre><h2 id="上传Hexo"><a href="#上传Hexo" class="headerlink" title="上传Hexo"></a>上传Hexo</h2><p>“清除缓存文件+生成静态文件+部署到Github+启动服务器”命令组合：</p><pre><code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy &amp;&amp; hexo server </code></pre><p>其他更多介绍请关注官网：<a href="https://hexo.io" target="_blank" rel="noopener">https://hexo.io</a><br>HEXO指令详解：<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/20181123/cjotqzssu0000tctng0ds9dja.html"/>
      <url>/20181123/cjotqzssu0000tctng0ds9dja.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>详细讲解安装破解版的Ps-CS6</title>
      <link href="/20181122/windows-installation-Photoshop-cs-6.html"/>
      <url>/20181122/windows-installation-Photoshop-cs-6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>photoshop cs6号称是Adobe公司史上最大规模的一次产品升级<br><a id="more"></a><br>，集图像扫描、编辑修改、图像制作、广告创意，图像输入与输出于一体的图形图像处理软件，photoshop cs6目前旨在到艺术作品的图像或数码照片编辑和操作。</p></blockquote><h2 id="软件特色"><a href="#软件特色" class="headerlink" title="软件特色"></a>软件特色</h2><ul><li>支撑多种图画格局<br>　　Photoshop支撑的图画的图画格局包含PSD,EPS,DCS,TIF,JEPG,BMP,PCX,FLM,PDF,PICT,GIF,PNG,IFF,FPX,RAW和SCT等多种,运用Photoshop能够将某种格局的图画另存为别的格局,以到达特别的需要。</li><li>支撑多种色彩形式<br>　　Photoshop支撑的色彩形式包含位图形式、灰度形式、RBG形式、CMYK形式、Lab形式、索引色彩形式、双色调形式和多通道形式等，而且能够完成各种形式这间的变换，另外，运用Photoshop还能够恣意调整图画的尺度，分辨率及布巨细，既能够在不影响分辨率的情况下图画尺度，又能够在不影响图画尺度的情况下增减分辨率。</li><li>供给了强壮的挑选图画规模的功用<br>　　运用矩形，椭圆面罩和套取东西，能够挑选一个或多个不一样尺度，形状的挑选规模磁性大过东西能够根据挑选边缘的像素反差，使挑选规模紧贴要挑选的图画，运用戏法棒东西或色彩规模指令能够根据色彩来自动挑选所要有些，合作多种快捷键的运用，能够完成挑选规模的相加，相减和反选等作用。</li><li>能够对图画进行各种修改<br>　　如移动、仿制、张贴、剪切、铲除等，如果在修改时出了过错，还能够进行无限次吊销和康复，Photoshop还能够对图画进行恣意的旋转和变形，例如按固定方向翻转或旋转。</li><li>能够对图画进行色谐和色彩的调整<br>　　使色相，饱和度、亮度、对比度的调整变得简略简单，Photoshop能够独自对某一挑选规模进行调整，也能够对某一种选定色彩进行调整，运用色彩平衡倒序能够在彩色图画中改动色彩的混合，运用色阶和曲线指令能够别离对图画的高光，暗谐和中心调有些进行调整,这是传统的绘画窍门难以到达的作用。</li><li>供给了绘画功用<br>　　运用喷枪东西，笔刷东西、铅笔东西，直线东西，能够制造各种图形，经过自行设定的笔刷形状，巨细和压力，能够创立不一样的笔刷作用，运用突变东西能够产生多种突变作用，加深和减淡东西能够有挑选地改动图画的暴光度。</li><li>运用Photoshop用户能够树立图层<br>　　布景层、文本层、调理层等多种图层，而且方便地对各个图层进行修改，用户能够对图层进行恣意的仿制、移动、 删去、翻转、兼并和组成，能够完成图层的摆放，还能够应用添加暗影等操作制造特技作用，调整图层可在不影响图画的一起，操控图层的透明度和饱和度等图画作用，文本层能够随时修改图画中的文本，用户还能够对不一样的色彩通道别离进行修改，运用蒙版能够精确地挑选规模,进行存储和载入操作。</li><li><p>Photoshop共供给了快到100种的滤镜<br>　　每种滤镜各不相同，用户能够运用这些滤镜完成各种特别作用，如运用风滤镜能够添加图画动感，运用浮雕滤镜呆以制造浮雕作用等。<br>功能介绍<br>　　Photoshop可分为图画编辑、图画组成、校色调色及特效制造有些。图画编辑是图画处理的根底，可以对图画做各种变换如扩大、减小、旋转、歪斜、镜像、透视等。也可进行复制、去掉斑驳、修补、修饰图画的破损等。图画组成则是将几幅图画经过图层操作、东西使用组成完好的、传达清晰意义的图画，这是美术规划的必经之路。photoshop供给的绘图东西让外来图画与创意极好地交融。校色调色是photoshop中深具威力的功能之一，可方便快捷地对图画的色彩进行明暗、色编的调整和校对，也可在不一样色彩进行切换以满意图画在不一样范畴如页面规划、打印、多媒体等方面使用。</p><h3 id="PS-cs6破解版的安装过程"><a href="#PS-cs6破解版的安装过程" class="headerlink" title="PS cs6破解版的安装过程"></a>PS cs6破解版的安装过程</h3></li><li><p>首先下载photo shop的安装包并解压，然后打开文件夹Adobe CS6</p></li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/001.png" title="This is an image"><ul><li>点击“Set-up.exe”，进行安装，一定要断网哦！！！</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/002.png" title="This is an image"><ul><li>点击“试用”</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/003.png" title="This is an image"><ul><li>之后就开始安装</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/004.png" title="This is an image"><ul><li>安装完成之后，在解压photo shop包中找到如下两个文件夹：<br>一个是32位机的破解补丁;一个是64位机的破解补丁;<br>当然从文件夹的名字，就可以看出他是多少位机的破解补丁啦！</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/005.png" title="This is an image"><ul><li>然后复制对应文件夹下面的一个.dll文件。如果你是64位机，你就复制64位破解补丁就可以了；如果是32位机，就复制32位破解补丁。</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/006.png" title="This is an image"><ul><li>将这个文件复制到你Photoshop安装的文件夹下，Adobe Photoshop CS6文件夹下面</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/007.png" title="This is an image"><img src="/20181122/windows-installation-Photoshop-cs-6/008.png" title="This is an image"><ul><li>点击“复制和替换”，到这里我们的photoshop破解版就安装好了！</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/009.png" title="This is an image"><ul><li>如何知道你的Photoshop已经破解了呢? 其实一个很简单的方法就是看启动时候的图片。<br>未破解的：</li></ul><p>已破解的：</p><img src="/20181122/windows-installation-Photoshop-cs-6/011.png" title="This is an image"><ul><li>还有一种判断破解与否的方法就是，查看“帮助”—&gt;取消激活，如果这几个字是灰色的，则说明已经破解了！</li></ul><img src="/20181122/windows-installation-Photoshop-cs-6/012.png" title="This is an image">]]></content>
      
      
      
        <tags>
            
            <tag> 安装ps </tag>
            
            <tag> 破解ps </tag>
            
            <tag> ps安装 </tag>
            
            <tag> ps安装破解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo博客被Google和百度收录</title>
      <link href="/20181122/hexo-Google-Baidu-Included.html"/>
      <url>/20181122/hexo-Google-Baidu-Included.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客被Google和百度收录"><a href="#hexo博客被Google和百度收录" class="headerlink" title="hexo博客被Google和百度收录"></a>hexo博客被Google和百度收录</h1><blockquote><p>个人博客搭建的差不多了，但是还没有什么人气，于是就想让百度和Google搜索到自己的博客，于是又开始折腾了。<br><a id="more"></a><br>生命在于折腾么！哈哈~下面就是我将自己的博客被百度Google收录的过程。</p></blockquote><!-- more --><h2 id="生成sitemap站点地图"><a href="#生成sitemap站点地图" class="headerlink" title="生成sitemap站点地图"></a>生成sitemap站点地图</h2><p>安装sitemap站点地图自动生成插件</p><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><h3 id="在站点配置文章中添加"><a href="#在站点配置文章中添加" class="headerlink" title="在站点配置文章中添加"></a>在站点配置文章中添加</h3><pre><code># 自动生成sitemapsitemap:   path: sitemap.xmlbaidusitemap:  path: baidusitemap.xml</code></pre><h4 id="注-上面的格式一定要正确，一定要有缩进。直接复制我的就行。"><a href="#注-上面的格式一定要正确，一定要有缩进。直接复制我的就行。" class="headerlink" title="注:上面的格式一定要正确，一定要有缩进。直接复制我的就行。"></a>注:上面的格式一定要正确，一定要有缩进。直接复制我的就行。</h4><h2 id="配置好后，执行更新命令"><a href="#配置好后，执行更新命令" class="headerlink" title="配置好后，执行更新命令"></a>配置好后，执行更新命令</h2><p>配置好后，执行hexo g就能在<code>your-hexo-site\public</code>中生成</p><p><code>sitemap.xml</code>和<code>baidusitemap.xml</code></p><p>其中第一个是要提交给google的，后面那个是提交给Baidu的。</p><p>在<code>source</code>文件夹下添加<code>robot.txt</code>，内容如下：</p><pre><code># hexo robots.txtUser-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://www.songit.cn/sitemap.xmlSitemap: http://www.songit.cn/baidusitemap.xml</code></pre><p>把最后两行中的网址改成自己的网址就行了。然后布署（上传），在浏览器地址栏输入自己的站点地图的地址就可以看到自己的站点地图。</p><h2 id="提交给百度站长"><a href="#提交给百度站长" class="headerlink" title="提交给百度站长"></a>提交给百度站长</h2><p>在国内，相信大部分人都在用百度搜索东西吧。所以百度到自己的网站很重要啊。<br>百度提交网址入口：<a href="https://ziyuan.baidu.com" target="_blank" rel="noopener">https://ziyuan.baidu.com</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Google收录 </tag>
            
            <tag> 百度收录 </tag>
            
            <tag> hexo收录 </tag>
            
            <tag> hexo收录设置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo文章中插入图片的最佳方法</title>
      <link href="/20181122/hexo-Insert-picture-in-article-Best-method.html"/>
      <url>/20181122/hexo-Insert-picture-in-article-Best-method.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客搭建之在文章中插入图片"><a href="#Hexo博客搭建之在文章中插入图片" class="headerlink" title="Hexo博客搭建之在文章中插入图片"></a>Hexo博客搭建之在文章中插入图片</h1><h2 id="可以放在文章自己的目录中（推荐方法）"><a href="#可以放在文章自己的目录中（推荐方法）" class="headerlink" title="可以放在文章自己的目录中（推荐方法）"></a>可以放在文章自己的目录中（推荐方法）</h2><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><a id="more"></a><pre><code>post_asset_folder: true</code></pre><p>将_config.yml文件中的配置项post_asset_folder设为true后，执行命令。</p><pre><code>hexo new &quot;post_name&quot;</code></pre><p>在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。</p><p>例如：你的图片位置</p><pre><code>_posts/post_name/image.jpg</code></pre><p>然后：在文章中插入下面代码即可显示图片。</p><pre><code>![](image.jpg)</code></pre><p>但是/但是/但是：上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><pre><code>{% asset_img image.jpg This is an image %}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo图片 </tag>
            
            <tag> 图片插入 </tag>
            
            <tag> 放置图片 </tag>
            
            <tag> 文章插入图片 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用CNPM安装HEXO</title>
      <link href="/20180916/CNPM-installation-Hxeo.html"/>
      <url>/20180916/CNPM-installation-Hxeo.html</url>
      
        <content type="html"><![CDATA[<p>安装完成GIT+NODE.JS之后，我们需要搭建hexo博客，但是按照正常网上的教程npm命令的时候你会发现，速度很慢，所以本文就诞生了.<br><a id="more"></a><br>希望大家可以跟着我一起阅读下面文章并实际操作吧。</p><h2 id="打开淘宝-NPM-镜像"><a href="#打开淘宝-NPM-镜像" class="headerlink" title="打开淘宝 NPM 镜像"></a>打开淘宝 NPM 镜像</h2><p>淘宝 NPM 镜像地址：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a><br>是的，没错这是一个镜像，以下是镜像地址的一些说明：这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br></p><h2 id="安装定制的CNPM命令"><a href="#安装定制的CNPM命令" class="headerlink" title="安装定制的CNPM命令"></a>安装定制的CNPM命令</h2><p>镜像地址我们知道了，但是我们该如何使用？其实我也是个新手，复杂的操作我也是在研究当中，但是值得高兴的是，他们定制了一个cnpm命令供我们使用，我理解的意思就是：cnpm可以直接下载镜像过来（淘宝 NPM 镜像）的资源，这样子，速度就会有所提升。<br>那么如何安装？别急，安装方法如下（也是官方的方法）：</p><pre><code class="shell">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>我的安装过程（详解）：</p><pre><code class="shell">[root@localhost ~]# npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm WARN deprecated socks@1.1.10: If using 2.x branch, please upgrade to at least 2.1.6 to avoid a serious bug with socket data flow and an import issue introduced in 2.1.0/usr/local/node/bin/cnpm -&gt; /usr/local/node/lib/node_modules/cnpm/bin/cnpm+ cnpm@6.0.0added 632 packages from 842 contributors in 61.469s[root@localhost ~]# cnpm -vcnpm@6.0.0 (/usr/local/node/lib/node_modules/cnpm/lib/parse_argv.js)npm@6.4.1 (/usr/local/node/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)node@10.8.0 (/usr/local/node/bin/node)npminstall@3.11.0 (/usr/local/node/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)prefix=/usr/local/node linux x64 3.10.0-693.el7.x86_64 registry=https://registry.npm.taobao.org[root@localhost ~]# </code></pre><h2 id="使用cnpm安装hexo"><a href="#使用cnpm安装hexo" class="headerlink" title="使用cnpm安装hexo"></a>使用cnpm安装hexo</h2><p>那么接下在就简单了，以后用到npm的地方，我们不用npm，而是使用定制的cnpm就可以了。<br>接下来安装hexo，官方命令：</p><pre><code class="shell">npm install -g hexo-cli</code></pre><p>但是我们不用npm，因为速度太鸡儿慢了，所以我们用定制的镜像命令（速度快）：</p><pre><code class="shell">cnpm install -g hexo-cli</code></pre><p>我的安装过程（详解）：</p><pre><code class="shell">[root@localhost ~]# cnpm install -g hexo-cliDownloading hexo-cli to /usr/local/node/lib/node_modules/hexo-cli_tmpCopying /usr/local/node/lib/node_modules/hexo-cli_tmp/_hexo-cli@1.1.0@hexo-cli to /usr/local/node/lib/node_modules/hexo-cliInstalling hexo-cli&#39;s dependencies to /usr/local/node/lib/node_modules/hexo-cli/node_modules[1/11] abbrev@^1.0.7 installed at node_modules/_abbrev@1.1.1@abbrev[2/11] command-exists@^1.2.0 installed at node_modules/_command-exists@1.2.7@command-exists[3/11] object-assign@^4.1.0 installed at node_modules/_object-assign@4.1.1@object-assign[4/11] minimist@^1.2.0 installed at node_modules/_minimist@1.2.0@minimist[5/11] tildify@^1.2.0 installed at node_modules/_tildify@1.2.0@tildify[6/11] chalk@^1.1.3 installed at node_modules/_chalk@1.1.3@chalk[7/11] bluebird@^3.4.0 installed at node_modules/_bluebird@3.5.2@bluebird[8/11] resolve@^1.5.0 installed at node_modules/_resolve@1.8.1@resolve[9/11] hexo-util@^0.6.0 installed at node_modules/_hexo-util@0.6.3@hexo-util[10/11] hexo-log@^0.2.0 installed at node_modules/_hexo-log@0.2.0@hexo-logfsevents@1.2.4 download from binary mirror: {&quot;module_name&quot;:&quot;fse&quot;,&quot;module_path&quot;:&quot;./lib/binding/{configuration}/{node_abi}-{platform}-{arch}/&quot;,&quot;remote_path&quot;:&quot;./v{version}/&quot;,&quot;package_name&quot;:&quot;{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz&quot;,&quot;host&quot;:&quot;https://cdn.npm.taobao.org/dist/fsevents&quot;}platform unsupported hexo-fs@0.2.3 › chokidar@1.7.0 › fsevents@^1.0.0 Package require os(darwin) not compatible with your platform(linux)[fsevents@^1.0.0] optional install error: Package require os(darwin) not compatible with your platform(linux)[11/11] hexo-fs@^0.2.0 installed at node_modules/_hexo-fs@0.2.3@hexo-fsRecently updated (since 2018-09-08): 1 packages (detail see file /usr/local/node/lib/node_modules/hexo-cli/node_modules/.recently_updates.txt)  2018-09-14    → hexo-fs@0.2.3 › chokidar@1.7.0 › readdirp@^2.0.0(2.2.1) (01:10:45)All packages installed (175 packages installed from npm registry, used 5s(network 5s), speed 744.34kB/s, json 151(929.93kB), tarball 2.88MB)[hexo-cli@1.1.0] link /usr/local/node/bin/hexo@ -&gt; /usr/local/node/lib/node_modules/hexo-cli/bin/hexo[root@localhost ~]# </code></pre><h2 id="初始化我们的博客"><a href="#初始化我们的博客" class="headerlink" title="初始化我们的博客"></a>初始化我们的博客</h2><p>接下来我们需要在某个目录里（自己希望它放在哪个目录，也可以叫文件夹）存放并初始化博客。<br>切换到自己放置博客的目录，我这里的是：/root<br>命令如下：</p><pre><code class="shell">[root@localhost ~]# cd /root/[root@localhost lixy]# pwd/root[root@localhost lixy]# </code></pre><p>初始化HEXO博客命令：</p><pre><code class="shell">hexo init &lt;folder&gt;  #执行init命令初始化hexo到你指定的目录</code></pre><pre><code class="shell">hexo init blog</code></pre><p>我的安装过程（详解）：</p><pre><code class="shell">[root@localhost ~]# hexo init blogINFO  Cloning hexo-starter to ~/blog正克隆到 &#39;/root/blog&#39;...remote: Counting objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 67展开对象中: 100% (68/68), 完成.检查连接... 完成。子模组 &#39;themes/landscape&#39; (https://github.com/hexojs/hexo-theme-landscape.git) 未对路径 &#39;themes/landscape&#39; 注册正克隆到 &#39;themes/landscape&#39;...remote: Counting objects: 838, done.remote: Compressing objects: 100% (6/6), done.remote: Total 838 (delta 1), reused 3 (delta 0), pack-reused 832接收对象中: 100% (838/838), 2.55 MiB | 8.00 KiB/s, 完成.处理 delta 中: 100% (441/441), 完成.检查连接... 完成。子模组路径 &#39;themes/landscape&#39;：检出 &#39;73a23c51f8487cfcd7c6deec96ccc7543960d350&#39;INFO  Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm WARN deprecated postinstall-build@5.0.3: postinstall-build&#39;s behavior is now built into npm! You should migrate off of postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.&gt; nunjucks@3.1.3 postinstall /root/blog/node_modules/nunjucks&gt; node postinstall-build.js srcnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;})added 421 packages from 484 contributors and audited 4704 packages in 399.137sfound 0 vulnerabilitiesINFO  Start blogging with Hexo![root@localhost ~]# </code></pre><p>安装完成之后，我们看一下他们的路径以及文件：</p><pre><code class="shell">[root@localhost ~]# cd ./blog/[root@localhost blog]# ls_config.yml  node_modules  package.json  package-lock.json  scaffolds  source  themes[root@localhost blog]# ls -la总用量 164drwxr-xr-x.   6 root root    153 9月  15 22:37 .dr-xr-x---.  18 root root   4096 9月  15 22:21 ..-rw-r--r--.   1 root root   1765 9月  15 22:22 _config.yml-rw-r--r--.   1 root root     65 9月  15 22:22 .gitignoredrwxr-xr-x. 286 root root   8192 9月  15 22:37 node_modules-rw-r--r--.   1 root root    443 9月  15 22:22 package.json-rw-r--r--.   1 root root 135897 9月  15 22:37 package-lock.jsondrwxr-xr-x.   2 root root     52 9月  15 22:22 scaffoldsdrwxr-xr-x.   3 root root     20 9月  15 22:22 sourcedrwxr-xr-x.   3 root root     23 9月  15 22:22 themes[root@localhost blog]# pwd/root/blog[root@localhost blog]#</code></pre><h2 id="生成静态网页文件"><a href="#生成静态网页文件" class="headerlink" title="生成静态网页文件"></a>生成静态网页文件</h2><p>使用 Hexo 生成静态文件快速而且简单。</p><pre><code class="shell">hexo generate       #自动根据当前目录下文件,生成静态网页</code></pre><pre><code class="shell">hexo generate</code></pre><p>我的过程（详解）：</p><pre><code class="shell">[root@localhost blog]# hexo generateINFO  Start processingINFO  Files loaded in 2.08 sINFO  Generated: index.htmlINFO  Generated: archives/index.htmlINFO  Generated: fancybox/fancybox_loading.gifINFO  Generated: fancybox/jquery.fancybox.pack.jsINFO  Generated: fancybox/blank.gifINFO  Generated: fancybox/fancybox_overlay.pngINFO  Generated: fancybox/fancybox_loading@2x.gifINFO  Generated: fancybox/fancybox_sprite.pngINFO  Generated: fancybox/fancybox_sprite@2x.pngINFO  Generated: archives/2018/09/index.htmlINFO  Generated: js/script.jsINFO  Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO  Generated: fancybox/jquery.fancybox.cssINFO  Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO  Generated: fancybox/helpers/jquery.fancybox-media.jsINFO  Generated: css/style.cssINFO  Generated: archives/2018/index.htmlINFO  Generated: css/fonts/fontawesome-webfont.woffINFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO  Generated: fancybox/helpers/fancybox_buttons.pngINFO  Generated: css/fonts/fontawesome-webfont.svgINFO  Generated: css/fonts/FontAwesome.otfINFO  Generated: css/fonts/fontawesome-webfont.eotINFO  Generated: css/fonts/fontawesome-webfont.ttfINFO  Generated: fancybox/jquery.fancybox.jsINFO  Generated: 2018/09/15/hello-world/index.htmlINFO  Generated: css/images/banner.jpgINFO  28 files generated in 4.78 s[root@localhost blog]# </code></pre><h2 id="启动HEXO"><a href="#启动HEXO" class="headerlink" title="启动HEXO"></a>启动HEXO</h2><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><pre><code class="shell">hexo server         #运行本地服务</code></pre><p>我的过程（详解）：</p><pre><code class="shell">[root@localhost blog]# hexo serverINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></pre><h2 id="其他介绍"><a href="#其他介绍" class="headerlink" title="其他介绍"></a>其他介绍</h2><p>“清除缓存文件+生成静态文件+启动服务器”命令组合：</p><pre><code class="shell">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</code></pre><p>其他更多介绍请关注官网：<a href="https://hexo.io" target="_blank" rel="noopener">https://hexo.io</a><br>HEXO指令详解：<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7-源码包安装-Node.js</title>
      <link href="/20180913/centos7-Source-package-installation-node.js.html"/>
      <url>/20180913/centos7-Source-package-installation-node.js.html</url>
      
        <content type="html"><![CDATA[<h1 id="centos7源码包安装Node-js"><a href="#centos7源码包安装Node-js" class="headerlink" title="centos7源码包安装Node.js"></a>centos7源码包安装Node.js</h1><blockquote></blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br><a id="more"></a></p><h2 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h2><p>Node.js官网网址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>Node.js中文网址：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a><br>Node.js镜像地址：<a href="https://npm.taobao.org/mirrors/node/v10.8.0/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/v10.8.0/</a><br>Node.js淘宝镜像：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a><br>命令提示：</p><p>下载：<code>wget http://cdn.npm.taobao.org/dist/node/v10.8.0/node-v10.8.0.tar.gz</code></p><p>解压：<code>tar -zxvf ./node-v10.8.0.tar.gz</code></p><p>权限：<code>chmod 777 -R ./node-v10.8.0</code></p><p>详情：</p><pre><code class="shell">[root@localhost ~]# cd /usr/src/[root@localhost src]# pwd/usr/src[root@localhost src]# ls -a.  ..  debug  git-2.7.3  git-2.7.3.tar.gz  kernels[root@localhost src]# wget http://cdn.npm.taobao.org/dist/node/v10.8.0/node-v10.8.0.tar.gz--2018-09-09 20:01:11--  http://cdn.npm.taobao.org/dist/node/v10.8.0/node-v10.8.0.tar.gz正在解析主机 cdn.npm.taobao.org (cdn.npm.taobao.org)... 124.203.224.202, 124.203.224.200, 124.203.224.199, ...正在连接 cdn.npm.taobao.org (cdn.npm.taobao.org)|124.203.224.202|:80... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：35594020 (34M) [application/octet-stream]正在保存至: “node-v10.8.0.tar.gz”100%[===================================&gt;] 35,594,020  9.28MB/s 用时 3.7s   2018-09-09 20:01:14 (9.14 MB/s) - 已保存 “node-v10.8.0.tar.gz” [35594020/35594020])[root@localhost src]# ls -a.  ..  debug  git-2.7.3  git-2.7.3.tar.gz  kernels  node-v10.8.0.tar.gz[root@localhost src]# tar -zxvf ./node-v10.8.0.tar.gz         #解压------省略N万字-----node-v10.8.0/benchmark/assert/deepequal-prims-and-objs-big-array-set.jsnode-v10.8.0/benchmark/assert/deepequal-prims-and-objs-big-loop.jsnode-v10.8.0/benchmark/assert/deepequal-set.jsnode-v10.8.0/benchmark/assert/deepequal-typedarrays.jsnode-v10.8.0/benchmark/assert/ok.jsnode-v10.8.0/benchmark/assert/throws.js[root@localhost src]# ls -a.   debug      git-2.7.3.tar.gz  node-v10.8.0..  git-2.7.3  kernels           node-v10.8.0.tar.gz[root@localhost src]# chmod 777 -R ./node-v10.8.0</code></pre><h2 id="确认服务器有nodejs编译及依赖相关软件"><a href="#确认服务器有nodejs编译及依赖相关软件" class="headerlink" title="确认服务器有nodejs编译及依赖相关软件"></a>确认服务器有nodejs编译及依赖相关软件</h2><p>命令提示：<code>yum -y install gcc gcc-c++ openssl-devel kernel-devel</code><br>详情：</p><pre><code class="shell">[root@localhost src]# yum -y install gcc gcc-c++ openssl-devel kernel-devel已加载插件：fastestmirror, langpacksbase                                                  | 3.6 kB     00:00     extras                                                | 3.4 kB     00:00     updates                                               | 3.4 kB     00:00     Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com软件包 gcc-4.8.5-28.el7_5.1.x86_64 已安装并且是最新版本软件包 gcc-c++-4.8.5-28.el7_5.1.x86_64 已安装并且是最新版本软件包 1:openssl-devel-1.0.2k-12.el7.x86_64 已安装并且是最新版本正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 kernel-devel.x86_64.0.3.10.0-862.11.6.el7 将被 安装--&gt; 解决依赖关系完成依赖关系解决============================================================================= Package           架构        版本                       源            大小=============================================================================正在安装: kernel-devel      x86_64      3.10.0-862.11.6.el7        updates       16 M事务概要=============================================================================安装  1 软件包总下载量：16 M安装大小：37 MDownloading packages:kernel-devel-3.10.0-862.11.6.el7.x86_64.rpm             |  16 MB   00:05     Running transaction checkRunning transaction testTransaction test succeededRunning transaction  正在安装    : kernel-devel-3.10.0-862.11.6.el7.x86_64                  1/1   验证中      : kernel-devel-3.10.0-862.11.6.el7.x86_64                  1/1 已安装:  kernel-devel.x86_64 0:3.10.0-862.11.6.el7                                  完毕！[root@localhost src]# </code></pre><h2 id="配置、编译、安装"><a href="#配置、编译、安装" class="headerlink" title="配置、编译、安装"></a>配置、编译、安装</h2><p>命令提示：<br>目录：<code>cd ./node-v10.8.0/</code></p><p>配置：<code>./configure --prefix=/usr/local/node</code></p><p>编译/安装：<code>make &amp;&amp; make install</code></p><p>详情：</p><pre><code class="shell">[root@localhost src]# ls -a.   debug      git-2.7.3.tar.gz  node-v10.8.0..  git-2.7.3  kernels           node-v10.8.0.tar.gz[root@localhost src]# cd ./node-v10.8.0/[root@localhost node-v10.8.0]# ./configure --prefix=/usr/local/node------省略N万字------                 &#39;v8_enable_gdbjit&#39;: 0,                 &#39;v8_enable_i18n_support&#39;: 1,                 &#39;v8_enable_inspector&#39;: 1,                 &#39;v8_no_strict_aliasing&#39;: 1,                 &#39;v8_optimized_debug&#39;: 0,                 &#39;v8_promise_internal_field_count&#39;: 1,                 &#39;v8_random_seed&#39;: 0,                 &#39;v8_trace_maps&#39;: 0,                 &#39;v8_typed_array_max_size_in_heap&#39;: 0,                 &#39;v8_use_snapshot&#39;: &#39;true&#39;,                 &#39;want_separate_host_toolset&#39;: 0}}creating config.gypicreating config.statuscreating config.mk[root@localhost node-v10.8.0]# make &amp;&amp; make install------此处省略N万字（时间足够我看两部电影）------installing /usr/local/node/include/node/openssl/archs/VC-WIN64A/asm/crypto/include/internal/dso_conf.hinstalling /usr/local/node/include/node/openssl/archs/linux64-s390x/asm/crypto/buildinf.hinstalling /usr/local/node/include/node/openssl/archs/linux32-s390x/asm/crypto/buildinf.hinstalling /usr/local/node/include/node/zconf.hinstalling /usr/local/node/include/node/zlib.h[root@localhost node-v10.8.0]# </code></pre><h2 id="配置nodejs环境"><a href="#配置nodejs环境" class="headerlink" title="配置nodejs环境"></a>配置nodejs环境</h2><p>详情1：</p><pre><code class="shell">[root@localhost node-v10.8.0]# vim /etc/profile#将以下内容复制进/etc/profile#set nodejs envexport NODE_HOME=/usr/local/nodeexport PATH=$NODE_HOME/bin:$PATHexport NODE_PATH=$NODE_HOME/lib/node_modules:$PATH</code></pre><p>详情2：<br>刷新环境变量：<code>source /etc/profile</code></p><p>重启系统命令：<code>shutdown -r now</code></p><h6 id="注意：重启后生效"><a href="#注意：重启后生效" class="headerlink" title="注意：重启后生效"></a>注意：重启后生效</h6><h2 id="检查nodejs版本以及验证安装是否成功"><a href="#检查nodejs版本以及验证安装是否成功" class="headerlink" title="检查nodejs版本以及验证安装是否成功"></a>检查nodejs版本以及验证安装是否成功</h2><p>检查版本：<code>node -v</code></p><p>验证安装：</p><pre><code class="shell">[root@localhost ~]# node -vv10.8.0[root@localhost ~]# node&gt; console.log(&quot;dgxueba&quot;);dgxuebaundefined&gt; </code></pre><p>至此，nodejs安装完成，谢谢大家观看。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> 源码包安装 </tag>
            
            <tag> Node.js </tag>
            
            <tag> Sourcepackage </tag>
            
            <tag> installation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7-源码包安装git</title>
      <link href="/20180913/centos7-Source-package-installation-git.html"/>
      <url>/20180913/centos7-Source-package-installation-git.html</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-7-源码包安装git"><a href="#Centos-7-源码包安装git" class="headerlink" title="Centos 7 源码包安装git"></a>Centos 7 源码包安装git</h1><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<br><a id="more"></a><br>而国外的GitHub和国内的Coding都是项目的托管平台。但是在使用Git工具的时候，第一步要学会如何安装git，本教程就手把手教大家如何手动编译安装git。<br>但是由于国内各种原因源码包下载速度极其缓慢，当然可以手动下载下来再上传到服务器上面，还请耐心等待，老老实实按照步骤安装，绝对可成。</p><blockquote><p>最新git源码下载地址</p></blockquote><p><a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a><br><a href="https://www.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">https://www.kernel.org/pub/software/scm/git/</a></p><h2 id="移除旧版本git"><a href="#移除旧版本git" class="headerlink" title="移除旧版本git"></a>移除旧版本git</h2><p>centos自带Git，7.x版本自带git 1.8.3.1（应该是，也可能不是），安装新版本之前需要使用yum remove git卸载（安装后卸载也可以）<br>主要命令：<code>yum remove git</code><br>详情：</p><pre><code>[root@localhost ~]# git --version        #查看自带的版本git version 1.8.3.1git version 1.8.3.1[root@localhost ~]# yum remove git        # 移除原来的版本已加载插件：fastestmirror, langpacks正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 git.x86_64.0.1.8.3.1-14.el7_5 将被 删除--&gt; 正在处理依赖关系 git = 1.8.3.1-14.el7_5，它被软件包 perl-Git-1.8.3.1-14.el7_5.noarch 需要--&gt; 正在处理依赖关系 git，它被软件包 gettext-devel-0.19.8.1-2.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 gettext-devel.x86_64.0.0.19.8.1-2.el7 将被 删除---&gt; 软件包 perl-Git.noarch.0.1.8.3.1-14.el7_5 将被 删除--&gt; 解决依赖关系完成base/7/x86_64                                         | 3.6 kB     00:00     extras/7/x86_64                                       | 3.4 kB     00:00     updates/7/x86_64                                      | 3.4 kB     00:00     依赖关系解决============================================================================= Package            架构        版本                     源             大小=============================================================================正在删除: git                x86_64      1.8.3.1-14.el7_5         @updates       22 M为依赖而移除: gettext-devel      x86_64      0.19.8.1-2.el7           @base         1.4 M perl-Git           noarch      1.8.3.1-14.el7_5         @updates       57 k事务概要=============================================================================移除  1 软件包 (+2 依赖软件包)安装大小：24 M是否继续？[y/N]：YDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction  正在删除    : gettext-devel-0.19.8.1-2.el7.x86_64                      1/3   正在删除    : perl-Git-1.8.3.1-14.el7_5.noarch                         2/3   正在删除    : git-1.8.3.1-14.el7_5.x86_64                              3/3   验证中      : gettext-devel-0.19.8.1-2.el7.x86_64                      1/3   验证中      : git-1.8.3.1-14.el7_5.x86_64                              2/3   验证中      : perl-Git-1.8.3.1-14.el7_5.noarch                         3/3 删除:  git.x86_64 0:1.8.3.1-14.el7_5                                              作为依赖被删除:  gettext-devel.x86_64 0:0.19.8.1-2.el7  perl-Git.noarch 0:1.8.3.1-14.el7_5 完毕！</code></pre><h2 id="安装所需软件包"><a href="#安装所需软件包" class="headerlink" title="安装所需软件包"></a>安装所需软件包</h2><p>命令：</p><pre><code class="shell">[root@localhost ~]# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel [root@localhost ~]# yum install gcc-c++ perl-ExtUtils-MakeMaker</code></pre><p>详情：</p><pre><code class="shell">[root@localhost ~]# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel已加载插件：fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: mirrors.163.com * extras: mirrors.163.com * updates: mirrors.163.com软件包 libcurl-devel-7.29.0-46.el7.x86_64 已安装并且是最新版本软件包 expat-devel-2.1.0-10.el7_3.x86_64 已安装并且是最新版本软件包 1:openssl-devel-1.0.2k-12.el7.x86_64 已安装并且是最新版本软件包 zlib-devel-1.2.7-17.el7.x86_64 已安装并且是最新版本正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 gettext-devel.x86_64.0.0.19.8.1-2.el7 将被 安装--&gt; 正在处理依赖关系 git，它被软件包 gettext-devel-0.19.8.1-2.el7.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 git.x86_64.0.1.8.3.1-14.el7_5 将被 安装--&gt; 正在处理依赖关系 perl-Git = 1.8.3.1-14.el7_5，它被软件包 git-1.8.3.1-14.el7_5.x86_64 需要--&gt; 正在处理依赖关系 perl(Git)，它被软件包 git-1.8.3.1-14.el7_5.x86_64 需要--&gt; 正在检查事务---&gt; 软件包 perl-Git.noarch.0.1.8.3.1-14.el7_5 将被 安装--&gt; 解决依赖关系完成依赖关系解决============================================================================= Package             架构         版本                   源             大小=============================================================================正在安装: gettext-devel       x86_64       0.19.8.1-2.el7         base          320 k为依赖而安装: git                 x86_64       1.8.3.1-14.el7_5       updates       4.4 M perl-Git            noarch       1.8.3.1-14.el7_5       updates        54 k事务概要=============================================================================安装  1 软件包 (+2 依赖软件包)总下载量：4.8 M安装大小：24 MIs this ok [y/d/N]: YDownloading packages:(1/3): perl-Git-1.8.3.1-14.el7_5.noarch.rpm             |  54 kB   00:00     (2/3): git-1.8.3.1-14.el7_5.x86_64.rpm                  | 4.4 MB   00:01     (3/3): gettext-devel-0.19.8.1-2.el7.x86_64.rpm          | 320 kB   00:01     -----------------------------------------------------------------------------总计                                            3.7 MB/s | 4.8 MB  00:01     Running transaction checkRunning transaction testTransaction test succeededRunning transaction  正在安装    : perl-Git-1.8.3.1-14.el7_5.noarch                         1/3   正在安装    : git-1.8.3.1-14.el7_5.x86_64                              2/3   正在安装    : gettext-devel-0.19.8.1-2.el7.x86_64                      3/3   验证中      : gettext-devel-0.19.8.1-2.el7.x86_64                      1/3   验证中      : git-1.8.3.1-14.el7_5.x86_64                              2/3   验证中      : perl-Git-1.8.3.1-14.el7_5.noarch                         3/3 已安装:  gettext-devel.x86_64 0:0.19.8.1-2.el7                                      作为依赖被安装:  git.x86_64 0:1.8.3.1-14.el7_5      perl-Git.noarch 0:1.8.3.1-14.el7_5     完毕！[root@localhost ~]# yum install gcc-c++ perl-ExtUtils-MakeMaker -y已加载插件：fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: mirrors.163.com * extras: mirrors.163.com * updates: mirrors.163.com软件包 gcc-c++-4.8.5-28.el7_5.1.x86_64 已安装并且是最新版本软件包 perl-ExtUtils-MakeMaker-6.68-3.el7.noarch 已安装并且是最新版本无须任何处理[root@localhost ~]# </code></pre><p><strong>这里注意，安装工具的时候系统自动安装上1.8.3版本，我们执行完这条命令后需要删除git1.8.3版本</strong></p><pre><code class="shell">[root@localhost git-2.7.3]# yum remove *git* -y------省略N万字------python-dns               noarch 1.12.0-4.20150617git465785f.el7                                                             @anaconda 1.0 M taglib                   x86_64 1.8-7.20130218git.el7       @anaconda 1.0 M xdg-utils                noarch 1.1.0-0.17.20120809git.el7  @anaconda 271 k xorg-x11-drv-ati         x86_64 7.7.1-3.20160928git3fc839ff.el7                                                             @anaconda 504 k为依赖而移除: PyQt4                    x86_64 4.10.1-13.el7               @anaconda  15 M abrt-desktop             x86_64 2.1.11-48.el7.centos        @anaconda 0.0   abrt-gui                 x86_64 2.1.11-48.el7.centos        @anaconda 240 k anaconda-core            x86_64 21.48.22.121-1.el7.centos   @anaconda 8.0 M anaconda-gui             x86_64 21.48.22.121-1.el7.centos   @anaconda 1.4 M anaconda-tui             x86_64 21.48.22.121-1.el7.centos   @anaconda 435 k ark                      x86_64 4.10.5-4.el7                @anaconda 574 k ark-libs                 x86_64 4.10.5-4.el7                @anaconda 428 k bluedevil                x86_64 2.1-1.el7                   @anaconda 1.7 M colord-kde               x86_64 0.3.0-3.el7                 @anaconda 429 k cronie                   x86_64 1.4.11-17.el7               @anaconda 215 k cronie-anacron           x86_64 1.4.11-17.el7               @anaconda  41 k fcoe-utils               x86_64 1.0.32-1.el7                @anaconda 291 k------省略------python2-ipaclient.noarch 0:4.5.0-20.el7.centos                               python2-ipalib.noarch 0:4.5.0-20.el7.centos                                  sane-backends-libs.x86_64 0:1.0.24-9.el7                                     setroubleshoot.x86_64 0:3.2.28-3.el7                                         sweeper.x86_64 0:4.10.5-4.el7                                                sysstat.x86_64 0:10.1.5-12.el7                                               wvdial.x86_64 0:1.61-9.el7                                                   xorg-x11-drivers.x86_64 0:7.7-6.el7                                        完毕！[root@localhost ~]# git --version-bash: /usr/bin/git: 没有那个文件或目录</code></pre><h2 id="下载-amp-安装-amp-解压"><a href="#下载-amp-安装-amp-解压" class="headerlink" title="下载&amp;安装&amp;解压"></a>下载&amp;安装&amp;解压</h2><p>命令：</p><pre><code class="shell">[root@localhost ~]# cd /usr/src[root@localhost src]# wget https://www.kernel.org/pub/software/scm/git/git-2.7.3.tar.gz[root@localhost src]# tar -zxvf ./git-2.7.3.tar.gz </code></pre><p>详情：</p><pre><code class="shell">[root@localhost ~]# cd /usr/src[root@localhost src]# ls -la总用量 4drwxr-xr-x.  4 root root   50 9月   8 23:30 .drwxr-xr-x. 13 root root  155 9月   7 07:00 ..drwxr-xr-x.  2 root root    6 11月  5 2016 debugdrwxr-xr-x.  2 root root    6 11月  5 2016 kernels-rw-r--r--.  1 root root 2934 9月   7 00:18 wget-log[root@localhost src]# wget https://www.kernel.org/pub/software/scm/git/git-2. 7.3.tar.gz--2018-09-08 23:32:43--  https://www.kernel.org/pub/software/scm/git/git-2.7.3.tar.gz正在解析主机 www.kernel.org (www.kernel.org)... 147.75.46.191, 2604:1380:4080:c00::1正在连接 www.kernel.org (www.kernel.org)|147.75.46.191|:443... 已连接。已发出 HTTP 请求，正在等待回应... 301 Moved Permanently位置：https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.7.3.tar.gz [跟随至新的 URL]--2018-09-08 23:32:45--  https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.7.3.tar.gz正在解析主机 mirrors.edge.kernel.org (mirrors.edge.kernel.org)... 147.75.101.1, 2604:1380:2001:3900::1正在连接 mirrors.edge.kernel.org (mirrors.edge.kernel.org)|147.75.101.1|:443... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：5724836 (5.5M) [application/x-gzip]正在保存至: “git-2.7.3.tar.gz” 0% [                                    ] 0           --.-K/s [root@localhost src]# tar -zxvf ./git-2.7.3.tar.gz git-2.7.3/git-2.7.3/.gitattributesgit-2.7.3/.gitignoregit-2.7.3/.mailmapgit-2.7.3/.travis.ymlgit-2.7.3/COPYINGgit-2.7.3/Documentation/git-2.7.3/Documentation/.gitattributesgit-2.7.3/Documentation/.gitignoregit-2.7.3/Documentation/CodingGuidelinesgit-2.7.3/Documentation/Makefilegit-2.7.3/Documentation/RelNotes/git-2.7.3/Documentation/RelNotes/1.5.0.1.txtgit-2.7.3/Documentation/RelNotes/1.5.0.2.txtgit-2.7.3/Documentation/RelNotes/1.5.0.3.txtgit-2.7.3/Documentation/RelNotes/1.5.0.4.txtgit-2.7.3/Documentation/RelNotes/1.5.0.5.txtgit-2.7.3/Documentation/RelNotes/1.5.0.6.txtgit-2.7.3/Documentation/RelNotes/1.5.0.7.txtgit-2.7.3/Documentation/RelNotes/1.5.0.txt------省略N万字------git-2.7.3/zlib.cgit-2.7.3/git.specgit-2.7.3/configuregit-2.7.3/versiongit-2.7.3/git-gui/version[root@localhost src]# chmod 777 -R ./git-2.7.3[root@localhost src]# ls -a.  ..  debug  git-2.7.3  git-2.7.3.tar.gz  kernels  wget-log[root@localhost src]# ls -la总用量 5612drwxr-xr-x.  5 root root      91 9月   8 23:44 .drwxr-xr-x. 13 root root     155 9月   7 07:00 ..drwxr-xr-x.  2 root root       6 11月  5 2016 debugdrwxrwxrwx. 20 root root   12288 3月  11 2016 git-2.7.3-rwxrwxrwx.  1 root root 5724836 9月   8 23:43 git-2.7.3.tar.gzdrwxr-xr-x.  2 root root       6 11月  5 2016 kernels-rw-r--r--.  1 root root    2934 9月   7 00:18 wget-log[root@localhost src]# </code></pre><h2 id="编译安装git"><a href="#编译安装git" class="headerlink" title="编译安装git"></a>编译安装git</h2><p>命令：</p><pre><code class="shell">[root@localhost src]# cd git-2.7.3[root@localhost git-2.7.3]# make configure[root@localhost git-2.7.3]# ./configure --prefix=/usr/git ##配置目录[root@localhost git-2.7.3]# make profix=/usr/git[root@localhost git-2.7.3]# make install</code></pre><p>详情1：</p><pre><code class="shell">[root@localhost src]# ls -la总用量 5612drwxr-xr-x.  5 root root      91 9月   8 23:44 .drwxr-xr-x. 13 root root     155 9月   7 07:00 ..drwxr-xr-x.  2 root root       6 11月  5 2016 debugdrwxrwxrwx. 20 root root   12288 3月  11 2016 git-2.7.3-rwxrwxrwx.  1 root root 5724836 9月   8 23:43 git-2.7.3.tar.gzdrwxr-xr-x.  2 root root       6 11月  5 2016 kernels-rw-r--r--.  1 root root    2934 9月   7 00:18 wget-log[root@localhost src]# cd git-2.7.3[root@localhost git-2.7.3]# make configureGIT_VERSION = 2.7.3    GEN configure/bin/sh: autoconf: 未找到命令make: *** [configure] 错误 127</code></pre><p><em>有错误，看到没有？由于我的是新系统，所以可能有些编译工具没有安装所以接下来需要安装齐全</em></p><pre><code class="shell">[root@localhost git-2.7.3]# yum install gcc-dev glibc-dev linux-headers-dev make automake autoconf m4 cmake -y已加载插件：fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: mirrors.163.com * extras: mirrors.163.com * updates: mirrors.163.com没有可用软件包 gcc-dev。没有可用软件包 glibc-dev。没有可用软件包 linux-headers-dev。软件包 1:make-3.82-23.el7.x86_64 已安装并且是最新版本正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 autoconf.noarch.0.2.69-11.el7 将被 安装---&gt; 软件包 automake.noarch.0.1.13.4-3.el7 将被 安装--&gt; 正在处理依赖关系 perl(Thread::Queue)，它被软件包 automake-1.13.4-3.el7.noarch 需要---&gt; 软件包 cmake.x86_64.0.2.8.12.2-2.el7 将被 安装---&gt; 软件包 m4.x86_64.0.1.4.16-10.el7 将被 安装--&gt; 正在检查事务---&gt; 软件包 perl-Thread-Queue.noarch.0.3.02-2.el7 将被 安装--&gt; 解决依赖关系完成依赖关系解决============================================================================= Package                 架构         版本                  源          大小=============================================================================正在安装: autoconf                noarch       2.69-11.el7           base       701 k automake                noarch       1.13.4-3.el7          base       679 k cmake                   x86_64       2.8.12.2-2.el7        base       7.1 M m4                      x86_64       1.4.16-10.el7         base       256 k为依赖而安装: perl-Thread-Queue       noarch       3.02-2.el7            base        17 k事务概要=============================================================================安装  4 软件包 (+1 依赖软件包)总下载量：8.7 M安装大小：31 MDownloading packages:(1/5): automake-1.13.4-3.el7.noarch.rpm                 | 679 kB   00:00     (2/5): autoconf-2.69-11.el7.noarch.rpm                  | 701 kB   00:00     (3/5): m4-1.4.16-10.el7.x86_64.rpm                      | 256 kB   00:00     (4/5): perl-Thread-Queue-3.02-2.el7.noarch.rpm          |  17 kB   00:00     (5/5): cmake-2.8.12.2-2.el7.x86_64.rpm                  | 7.1 MB   00:01     -----------------------------------------------------------------------------总计                                            3.7 MB/s | 8.7 MB  00:02     Running transaction checkRunning transaction testTransaction test succeededRunning transaction  正在安装    : perl-Thread-Queue-3.02-2.el7.noarch                      1/5   正在安装    : m4-1.4.16-10.el7.x86_64                                  2/5   正在安装    : autoconf-2.69-11.el7.noarch                              3/5   正在安装    : automake-1.13.4-3.el7.noarch                             4/5   正在安装    : cmake-2.8.12.2-2.el7.x86_64                              5/5   验证中      : m4-1.4.16-10.el7.x86_64                                  1/5   验证中      : autoconf-2.69-11.el7.noarch                              2/5   验证中      : cmake-2.8.12.2-2.el7.x86_64                              3/5   验证中      : perl-Thread-Queue-3.02-2.el7.noarch                      4/5   验证中      : automake-1.13.4-3.el7.noarch                             5/5 已安装:  autoconf.noarch 0:2.69-11.el7        automake.noarch 0:1.13.4-3.el7         cmake.x86_64 0:2.8.12.2-2.el7        m4.x86_64 0:1.4.16-10.el7            作为依赖被安装:  perl-Thread-Queue.noarch 0:3.02-2.el7                                      完毕！</code></pre><p>ok，安装完成，接下来继续编译安装（详情2）：</p><pre><code class="shell">[root@localhost git-2.7.3]# make configure    GEN configure[root@localhost git-2.7.3]# ./configure --prefix=/usr/gitconfigure: Setting lib to &#39;lib&#39; (the default)configure: Will try -pthread then -lpthread to enable POSIX Threads.configure: CHECKS for site configurationchecking for gcc... gcc------省略N万字------checking for POSIX Threads with &#39;&#39;... nochecking for POSIX Threads with &#39;-mt&#39;... nochecking for POSIX Threads with &#39;-pthread&#39;... yesconfigure: creating ./config.statusconfig.status: creating config.mak.autogenconfig.status: executing config.mak.autogen commands[root@localhost git-2.7.3]# [root@localhost git-2.7.3]# make profix=/usr/git    * new build flags    CC credential-store.o    * new link flags    CC abspath.o    CC advice.o    CC alias.o    CC alloc.o    CC archive.o    CC archive-tar.o    CC archive-zip.o    CC argv-array.o    * new prefix flags    CC attr.o    CC base85.o------省略N万字------    GEN bin-wrappers/test-string-list    GEN bin-wrappers/test-submodule-config    GEN bin-wrappers/test-subprocess    GEN bin-wrappers/test-svn-fe    GEN bin-wrappers/test-urlmatch-normalization    GEN bin-wrappers/test-wildmatch    GEN git-remote-testgit[root@localhost git-2.7.3]# [root@localhost git-2.7.3]# make install    SUBDIR git-gui    SUBDIR gitk-git    SUBDIR perl    SUBDIR templatesinstall -d -m 755 &#39;/usr/git/bin&#39;install -d -m 755 &#39;/usr/git/libexec/git-core&#39;install   git-credential-store git-daemon git-fast-import git-http-backend ------省略N万字------    rm -f &quot;$execdir/$p&quot; &amp;&amp; \    test -z &quot;&quot; &amp;&amp; \    ln &quot;$execdir/git&quot; &quot;$execdir/$p&quot; 2&gt;/dev/null || \    ln -s &quot;git&quot; &quot;$execdir/$p&quot; 2&gt;/dev/null || \    cp &quot;$execdir/git&quot; &quot;$execdir/$p&quot; || exit; \done &amp;&amp; \remote_curl_aliases=&quot;git-remote-https git-remote-ftp git-remote-ftps&quot; &amp;&amp; \for p in $remote_curl_aliases; do \    rm -f &quot;$execdir/$p&quot; &amp;&amp; \    test -z &quot;&quot; &amp;&amp; \    ln &quot;$execdir/git-remote-http&quot; &quot;$execdir/$p&quot; 2&gt;/dev/null || \    ln -s &quot;git-remote-http&quot; &quot;$execdir/$p&quot; 2&gt;/dev/null || \    cp &quot;$execdir/git-remote-http&quot; &quot;$execdir/$p&quot; || exit; \done &amp;&amp; \./check_bindir &quot;z$bindir&quot; &quot;z$execdir&quot; &quot;$bindir/git-add&quot;[root@localhost git-2.7.3]# </code></pre><h2 id="加入系统变量以及检查新版本"><a href="#加入系统变量以及检查新版本" class="headerlink" title="加入系统变量以及检查新版本"></a>加入系统变量以及检查新版本</h2><p>命令：</p><pre><code class="shell">[root@localhost git-2.7.3]# echo &quot;export PATH=$PATH:/usr/git/bin&quot; &gt;&gt; /etc/profile        #加入环境变量[root@localhost git-2.7.3]# source /etc/profile        #刷新变量[root@localhost git-2.7.3]# git --version         #检查版本git version 2.7.3</code></pre><p>到此，git2.7.3版本已经安装完毕，你可以使用了，如果按照此教程安装，还是不行的话，你可以联系我，本人不高冷，随时联系随时回复你，最重要的是你的支持，谢谢！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码包安装 </tag>
            
            <tag> cenots7 </tag>
            
            <tag> 安装git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
